{"ast":null,"code":"var _jsxFileName = \"/Users/Dia/Desktop/KakaoCloudSchool/react/my-todo-app/src/components/Lists.js\";\nimport React from 'react';\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport List from './List';\nimport Edit from './Edit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Lists = /*#__PURE__*/React.memo(_c = _ref => {\n  let {\n    todoData,\n    setTodoData,\n    deleteClick\n  } = _ref;\n  console.log(\"Lists\");\n\n  const handleDrop = e => {\n    //만약에 drop end한 위치가 DragDropContext밖이면 return\n    if (!e.destination) return; // copy todoData\n\n    const updateTodo = todoData; //drag되는 요소 삭제\n\n    const [reorder] = updateTodo.splice(e.source.index, 1); //drop되는 위치에 삽입\n\n    updateTodo.splice(e.destination.index, 0, reorder); //순서 바꾼 배열로 setTodoData \n\n    setTodoData(updateTodo);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: handleDrop,\n      children: /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"to-do\",\n        children: provided => /*#__PURE__*/_jsxDEV(\"div\", { ...provided.droppableProps,\n          ref: provided.innerRef,\n          children: [todoData.map((data, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: data.id.toString(),\n            index: index,\n            children: (provided, snapshot) =>\n            /*#__PURE__*/\n            // if (data.editMode){\n            //     <Edit/>\n            // } else{\n            //     <List id={data.id}\n            // title={data.title}\n            // completed={data.completed}\n            // editMode={data.editMode}\n            // todoData={todoData}\n            // setTodoData={setTodoData}\n            // provided={provided}\n            // snapshot={snapshot}\n            // deleteClick={deleteClick}/>\n            // }\n            _jsxDEV(Edit, {\n              id: data.id,\n              title: data.title,\n              completed: data.completed,\n              editMode: data.editMode,\n              todoData: todoData,\n              setTodoData: setTodoData,\n              provided: provided,\n              snapshot: snapshot,\n              deleteClick: deleteClick\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 41\n            }, this)\n          }, data.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 29\n          }, this)), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n});\n_c2 = Lists;\nexport default Lists; //구조 분해 할당을 이용\n//export default function Lists({todoData,setTodoData}) {\n// const handleDrop=(e)=>{\n//     //만약에 drop end한 위치가 DragDropContext밖이면 return\n//     if(!e.destination) return;\n//     // copy todoData\n//     const updateTodo = todoData;\n//     //drag되는 요소 삭제\n//     const [reorder] = updateTodo.splice(e.source.index,1);\n//     //drop되는 위치에 삽입\n//     updateTodo.splice(e.destination.index,0,reorder);\n//     //순서 바꾼 배열로 setTodoData \n//     setTodoData(updateTodo);\n// }\n// return (\n//     <div>\n//         <DragDropContext onDragEnd={handleDrop}>\n//             <Droppable droppableId='to-do'>\n//                 {(provided)=>(\n//                     <div {...provided.droppableProps} ref={provided.innerRef}>\n//                     {todoData.map((data,index) => (\n//                         <Draggable \n//                             key={data.id}\n//                             draggableId={data.id.toString()}\n//                             index={index}>\n//                                 {(provided,snapshot)=>(\n//                                     <List id={data.id}\n//                                     title={data.title}\n//                                     completed={data.completed}\n//                                     todoData={todoData}\n//                                     setTodoData={setTodoData}\n//                                     provided={provided}\n//                                     snapshot={snapshot}/>\n//                             )}\n//                         </Draggable>\n//                     ))}\n//                     {provided.placeholder}\n//                     </div>\n//                 )}\n//             </Droppable>\n//         </DragDropContext>\n//     </div>\n// )\n//}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Lists$React.memo\");\n$RefreshReg$(_c2, \"Lists\");","map":{"version":3,"names":["React","DragDropContext","Draggable","Droppable","List","Edit","Lists","memo","todoData","setTodoData","deleteClick","console","log","handleDrop","e","destination","updateTodo","reorder","splice","source","index","provided","droppableProps","innerRef","map","data","id","toString","snapshot","title","completed","editMode","placeholder"],"sources":["/Users/Dia/Desktop/KakaoCloudSchool/react/my-todo-app/src/components/Lists.js"],"sourcesContent":["import React from 'react'\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport List from './List'\nimport Edit from './Edit'\n\n\n\nconst Lists = React.memo(({todoData,setTodoData,deleteClick})=>{\n\n    console.log(\"Lists\");\n     const handleDrop=(e)=>{\n        //만약에 drop end한 위치가 DragDropContext밖이면 return\n        if(!e.destination) return;\n\n        // copy todoData\n        const updateTodo = todoData;\n\n        //drag되는 요소 삭제\n        const [reorder] = updateTodo.splice(e.source.index,1);\n\n        //drop되는 위치에 삽입\n        updateTodo.splice(e.destination.index,0,reorder);\n\n        //순서 바꾼 배열로 setTodoData \n        setTodoData(updateTodo);\n\n    }\n\n    return (\n        <div>\n            <DragDropContext onDragEnd={handleDrop}>\n                <Droppable droppableId='to-do'>\n                    {(provided)=>(\n                        <div {...provided.droppableProps} ref={provided.innerRef}>\n                        {todoData.map((data,index) => (\n                            <Draggable \n                                key={data.id}\n                                draggableId={data.id.toString()}\n                                index={index}>\n                                    {(provided,snapshot)=>(\n                                        // if (data.editMode){\n                                        //     <Edit/>\n                                        // } else{\n                                        //     <List id={data.id}\n                                        // title={data.title}\n                                        // completed={data.completed}\n                                        // editMode={data.editMode}\n                                        // todoData={todoData}\n                                        // setTodoData={setTodoData}\n                                        // provided={provided}\n                                        // snapshot={snapshot}\n                                        // deleteClick={deleteClick}/>\n                                        // }\n                                        <Edit id={data.id}\n                                        title={data.title}\n                                        completed={data.completed}\n                                        editMode={data.editMode}\n                                        todoData={todoData}\n                                        setTodoData={setTodoData}\n                                        provided={provided}\n                                        snapshot={snapshot}\n                                        deleteClick={deleteClick}/>\n                                    )}\n                            </Draggable>\n                        ))}\n                        {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n            </DragDropContext>\n        </div>\n    )\n});\nexport default Lists;\n\n//구조 분해 할당을 이용\n//export default function Lists({todoData,setTodoData}) {\n\n    // const handleDrop=(e)=>{\n    //     //만약에 drop end한 위치가 DragDropContext밖이면 return\n    //     if(!e.destination) return;\n\n    //     // copy todoData\n    //     const updateTodo = todoData;\n\n    //     //drag되는 요소 삭제\n    //     const [reorder] = updateTodo.splice(e.source.index,1);\n\n    //     //drop되는 위치에 삽입\n    //     updateTodo.splice(e.destination.index,0,reorder);\n\n    //     //순서 바꾼 배열로 setTodoData \n    //     setTodoData(updateTodo);\n\n    // }\n\n    // return (\n    //     <div>\n    //         <DragDropContext onDragEnd={handleDrop}>\n    //             <Droppable droppableId='to-do'>\n    //                 {(provided)=>(\n    //                     <div {...provided.droppableProps} ref={provided.innerRef}>\n    //                     {todoData.map((data,index) => (\n    //                         <Draggable \n    //                             key={data.id}\n    //                             draggableId={data.id.toString()}\n    //                             index={index}>\n    //                                 {(provided,snapshot)=>(\n    //                                     <List id={data.id}\n    //                                     title={data.title}\n    //                                     completed={data.completed}\n    //                                     todoData={todoData}\n    //                                     setTodoData={setTodoData}\n    //                                     provided={provided}\n    //                                     snapshot={snapshot}/>\n    //                             )}\n    //                         </Draggable>\n    //                     ))}\n    //                     {provided.placeholder}\n    //                     </div>\n    //                 )}\n    //             </Droppable>\n    //         </DragDropContext>\n    //     </div>\n    // )\n//}\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,EAA0BC,SAA1B,EAAqCC,SAArC,QAAsD,qBAAtD;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAIA,MAAMC,KAAK,gBAAGN,KAAK,CAACO,IAAN,MAAW,QAAsC;EAAA,IAArC;IAACC,QAAD;IAAUC,WAAV;IAAsBC;EAAtB,CAAqC;EAE3DC,OAAO,CAACC,GAAR,CAAY,OAAZ;;EACC,MAAMC,UAAU,GAAEC,CAAD,IAAK;IACnB;IACA,IAAG,CAACA,CAAC,CAACC,WAAN,EAAmB,OAFA,CAInB;;IACA,MAAMC,UAAU,GAAGR,QAAnB,CALmB,CAOnB;;IACA,MAAM,CAACS,OAAD,IAAYD,UAAU,CAACE,MAAX,CAAkBJ,CAAC,CAACK,MAAF,CAASC,KAA3B,EAAiC,CAAjC,CAAlB,CARmB,CAUnB;;IACAJ,UAAU,CAACE,MAAX,CAAkBJ,CAAC,CAACC,WAAF,CAAcK,KAAhC,EAAsC,CAAtC,EAAwCH,OAAxC,EAXmB,CAanB;;IACAR,WAAW,CAACO,UAAD,CAAX;EAEH,CAhBA;;EAkBD,oBACI;IAAA,uBACI,QAAC,eAAD;MAAiB,SAAS,EAAEH,UAA5B;MAAA,uBACI,QAAC,SAAD;QAAW,WAAW,EAAC,OAAvB;QAAA,UACMQ,QAAD,iBACG,oBAASA,QAAQ,CAACC,cAAlB;UAAkC,GAAG,EAAED,QAAQ,CAACE,QAAhD;UAAA,WACCf,QAAQ,CAACgB,GAAT,CAAa,CAACC,IAAD,EAAML,KAAN,kBACV,QAAC,SAAD;YAEI,WAAW,EAAEK,IAAI,CAACC,EAAL,CAAQC,QAAR,EAFjB;YAGI,KAAK,EAAEP,KAHX;YAAA,UAIS,CAACC,QAAD,EAAUO,QAAV;YAAA;YACG;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA,QAAC,IAAD;cAAM,EAAE,EAAEH,IAAI,CAACC,EAAf;cACA,KAAK,EAAED,IAAI,CAACI,KADZ;cAEA,SAAS,EAAEJ,IAAI,CAACK,SAFhB;cAGA,QAAQ,EAAEL,IAAI,CAACM,QAHf;cAIA,QAAQ,EAAEvB,QAJV;cAKA,WAAW,EAAEC,WALb;cAMA,QAAQ,EAAEY,QANV;cAOA,QAAQ,EAAEO,QAPV;cAQA,WAAW,EAAElB;YARb;cAAA;cAAA;cAAA;YAAA;UAlBZ,GACSe,IAAI,CAACC,EADd;YAAA;YAAA;YAAA;UAAA,QADH,CADD,EAgCCL,QAAQ,CAACW,WAhCV;QAAA;UAAA;UAAA;UAAA;QAAA;MAFR;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AA4CH,CAjEa,CAAd;MAAM1B,K;AAkEN,eAAeA,KAAf,C,CAEA;AACA;AAEI;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ"},"metadata":{},"sourceType":"module"}